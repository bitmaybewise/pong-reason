// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry      = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function playground_width() {
  return ( document.getElementById("playground").offsetWidth );
}

function playground_height() {
  return ( document.getElementById("playground").offsetHeight );
}

function draw_end_game() {
  return ( document.getElementById("game-over").style.display = "block" );
}

function next_position(current_position, speed, direction) {
  return current_position + Caml_int32.imul(speed, direction) | 0;
}

function move_ball_dir_x(game) {
  var pos_x = next_position(game[/* ball */3][/* x */1], game[/* ball */3][/* speed */0], game[/* ball */3][/* direction_x */3]);
  if (pos_x > ( document.getElementById("playground").offsetWidth )) {
    return -1;
  } else if (pos_x < 0) {
    return 1;
  } else {
    return game[/* ball */3][/* direction_x */3];
  }
}

function move_ball_dir_y(game) {
  var pos_y = next_position(game[/* ball */3][/* y */2], game[/* ball */3][/* speed */0], game[/* ball */3][/* direction_y */4]);
  if (pos_y > ( document.getElementById("playground").offsetHeight )) {
    return -1;
  } else if (pos_y < 0) {
    return 1;
  } else {
    return game[/* ball */3][/* direction_y */4];
  }
}

function move_ball_position(ball, direction) {
  return Caml_int32.imul(ball[/* speed */0], direction);
}

function change_ball_position(game, dir_x, pos_x, dir_y, pos_y) {
  game[/* ball */3][/* direction_x */3] = dir_x;
  game[/* ball */3][/* direction_y */4] = dir_y;
  game[/* ball */3][/* x */1] = game[/* ball */3][/* x */1] + pos_x | 0;
  game[/* ball */3][/* y */2] = game[/* ball */3][/* y */2] + pos_y | 0;
  return /* () */0;
}

var draw_ball = ( 
        function (x, y) {
            var ballHTML = document.getElementById('ball');
            ballHTML.style.left = x + 'px';
            ballHTML.style.top  = y + 'px';
        }
    );

function move_racket(racket_offset, game) {
  var match = game[/* pressed_key */1];
  if (match) {
    if (match[0] === 37) {
      return racket_offset - 5 | 0;
    } else {
      return racket_offset + 5 | 0;
    }
  } else {
    return racket_offset;
  }
}

function ball_offset_height() {
  return ( document.getElementById('ball').offsetHeight );
}

function racket_offset_left() {
  return ( document.getElementById('racket').offsetLeft );
}

function racket_offset_width() {
  return ( document.getElementById('racket').offsetWidth );
}

function racket_offset_top() {
  return ( document.getElementById('racket').offsetTop );
}

function racket_offset_height() {
  return ( document.getElementById('racket').offsetHeight );
}

function racket_border_right() {
  return ( document.getElementById('racket').offsetLeft ) + ( document.getElementById('racket').offsetWidth ) | 0;
}

function racket_pos_y() {
  return ( document.getElementById('racket').offsetTop ) - (( document.getElementById('ball').offsetHeight ) / 2 | 0) | 0;
}

function is_racket_hit(ball) {
  var pos_x = next_position(ball[/* x */1], ball[/* speed */0], ball[/* direction_x */3]);
  var pos_y = next_position(ball[/* y */2], ball[/* speed */0], ball[/* direction_y */4]);
  if (pos_x >= ( document.getElementById('racket').offsetLeft ) && pos_x <= racket_border_right(/* () */0)) {
    return +(pos_y >= racket_pos_y(/* () */0));
  } else {
    return /* false */0;
  }
}

function compute_score(ball, score) {
  if (is_racket_hit(ball)) {
    return score + 1 | 0;
  } else {
    return score;
  }
}

var draw_racket = ( 
        function (pixelPos) {
            document.getElementById('racket').style.left = pixelPos + 'px';
        }
    );

var draw_score = ( 
    function (score) {
        document.getElementById('score').innerHTML = score;
    }
);

function change_direction_y(ball) {
  if (is_racket_hit(ball)) {
    ball[/* direction_y */4] = -1;
    return /* () */0;
  } else {
    return 0;
  }
}

function is_game_over(ball) {
  var pos_y = next_position(ball[/* y */2], ball[/* speed */0], ball[/* direction_y */4]) - ( document.getElementById('racket').offsetHeight ) | 0;
  return +(pos_y > racket_pos_y(/* () */0));
}

function end_game(game) {
  if (is_game_over(game[/* ball */3])) {
    game[/* status */0] = /* GameOver */2;
    return /* () */0;
  } else {
    return 0;
  }
}

function run(game) {
  var new_dir_x = move_ball_dir_x(game);
  var new_dir_y = move_ball_dir_y(game);
  var new_pos_x = Caml_int32.imul(game[/* ball */3][/* speed */0], new_dir_x);
  var new_pos_y = Caml_int32.imul(game[/* ball */3][/* speed */0], new_dir_y);
  change_ball_position(game, new_dir_x, new_pos_x, new_dir_y, new_pos_y);
  Curry._2(draw_ball, game[/* ball */3][/* x */1], game[/* ball */3][/* y */2]);
  var pixel_pos = move_racket(( document.getElementById('racket').offsetLeft ), game);
  Curry._1(draw_racket, pixel_pos);
  game[/* score */2] = compute_score(game[/* ball */3], game[/* score */2]);
  Curry._1(draw_score, game[/* score */2]);
  change_direction_y(game[/* ball */3]);
  return end_game(game);
}

function loop(game) {
  var match = game[/* status */0];
  switch (match) {
    case 0 : 
        return /* () */0;
    case 1 : 
        return run(game);
    case 2 : 
        return ( document.getElementById("game-over").style.display = "block" );
    
  }
}

function start(game) {
  game[/* status */0] = /* Running */1;
  return ( document.getElementById('start-message').style.display = "none" );
}

function set_pressed_key(game, key_number) {
  game[/* pressed_key */1] = /* Some */[key_number];
  return /* () */0;
}

function clear_pressed_key(game) {
  game[/* pressed_key */1] = /* None */0;
  return /* () */0;
}

window.onload = (function () {
    var game = /* record */[
      /* status : Stopped */0,
      /* pressed_key : None */0,
      /* score */0,
      /* ball : record */[
        /* speed */5,
        /* x */135,
        /* y */100,
        /* direction_x */-1,
        /* direction_y */-1
      ]
    ];
    setInterval((function () {
            return loop(game);
          }), 16);
    document.addEventListener("keydown", (function (evt) {
            var match = game[/* status */0];
            switch (match) {
              case 0 : 
                  game[/* status */0] = /* Running */1;
                  return ( document.getElementById('start-message').style.display = "none" );
              case 1 : 
                  var key_number = evt.which;
                  game[/* pressed_key */1] = /* Some */[key_number];
                  return /* () */0;
              case 2 : 
                  return /* () */0;
              
            }
          }));
    document.addEventListener("keyup", (function () {
            game[/* pressed_key */1] = /* None */0;
            return /* () */0;
          }));
    return /* () */0;
  });

var key_left = 37;

var key_right = 39;

exports.key_left             = key_left;
exports.key_right            = key_right;
exports.playground_width     = playground_width;
exports.playground_height    = playground_height;
exports.draw_end_game        = draw_end_game;
exports.next_position        = next_position;
exports.move_ball_dir_x      = move_ball_dir_x;
exports.move_ball_dir_y      = move_ball_dir_y;
exports.move_ball_position   = move_ball_position;
exports.change_ball_position = change_ball_position;
exports.draw_ball            = draw_ball;
exports.move_racket          = move_racket;
exports.ball_offset_height   = ball_offset_height;
exports.racket_offset_left   = racket_offset_left;
exports.racket_offset_width  = racket_offset_width;
exports.racket_offset_top    = racket_offset_top;
exports.racket_offset_height = racket_offset_height;
exports.racket_border_right  = racket_border_right;
exports.racket_pos_y         = racket_pos_y;
exports.is_racket_hit        = is_racket_hit;
exports.compute_score        = compute_score;
exports.draw_racket          = draw_racket;
exports.draw_score           = draw_score;
exports.change_direction_y   = change_direction_y;
exports.is_game_over         = is_game_over;
exports.end_game             = end_game;
exports.run                  = run;
exports.loop                 = loop;
exports.start                = start;
exports.set_pressed_key      = set_pressed_key;
exports.clear_pressed_key    = clear_pressed_key;
/* draw_ball Not a pure module */
